{"version":3,"sources":["indexDb/index.ts","screens/singlePost/index.tsx","services/index.ts","components/AddPost/index.tsx","components/List/index.tsx","screens/Posts/index.tsx","Routes/index.tsx","App.tsx","index.tsx","swDev.js"],"names":["db","a","openDB","upgrade","createObjectStore","key","data","put","postId","getPostsFromInDb","get","getPostCommentFromInDb","withRouter","props","params","useParams","useState","postComments","setPostComments","useEffect","id","fetch","then","response","json","res","setPostCommentInDb","catch","commentsFromIDB","className","Button","variant","onClick","history","goBack","Jumbotron","fluid","Container","map","comment","name","email","body","AddPost","onchangeHandler","form","addPostBtnHandler","showLoader","backToListBtnHandler","Form","Group","controlId","Label","Control","onChange","type","value","title","placeholder","userId","Text","disabled","Spinner","animation","postList","deleteBtnHandler","ListGroup","Item","length","post","Fragment","push","Posts","setPostList","isAddPostBtnClicked","setAddPostButtonClicked","mode","setMode","postForm","setPostForm","setShowLoader","setKey","makeGetPostApiCall","AsPerRes","slice","setPostListInDb","postListFromStorage","Alert","style","fontSize","Tabs","activeKey","onSelect","k","Tab","eventKey","Image","src","newPost","navigator","onLine","method","JSON","stringify","copyPostList","unshift","setNewlyAddedPostInDb","serviceWorker","ready","swRegistration","sync","register","e","target","prev","deletePost","updatedPostList","filter","item","setDeletingPostIdInDb","Routing","path","exact","strict","App","initIndexDb","basename","ReactDOM","render","StrictMode","document","getElementById","swUrl","process","console","log","swDev"],"mappings":"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","file":"static/js/main.06bae4af.chunk.js","sourcesContent":["import { openDB } from \"idb\";\nimport {\n  MyDB,\n  CreateNewPostInterface,\n  PostListInterface,\n  PostCommentsInterface\n} from \"src/interfaces/PostListInterface\";\n\nlet db: any;\nexport async function initIndexDb() {\n  db = await openDB<MyDB>(\"pwa-poc-db\", 1, {\n    upgrade(db) {\n      db.createObjectStore(\"posts\");\n      db.createObjectStore(\"delete-post\");\n      db.createObjectStore(\"new-post\");\n    }\n  });\n}\n\nexport async function setNewlyAddedPostInDb(\n  key: string,\n  data: CreateNewPostInterface\n) {\n  return (await db).put(\"new-post\", data, key);\n}\n\nexport async function setDeletingPostIdInDb(key: string, postId: number) {\n  return (await db).put(\"delete-post\", postId, key);\n}\n\nexport async function getNewlyAddedPostInDb(key: string) {\n  return (await db).get(\"new-post\", key);\n}\n\nexport async function setPostListInDb(\n  key: string,\n  data: Array<PostListInterface>\n) {\n  return (await db).put(\"posts\", data, key);\n}\n\nexport async function getPostsFromInDb(key: string) {\n  return (await db).get(\"posts\", key);\n}\n\nexport async function setPostCommentInDb(\n  key: string,\n  data: Array<PostCommentsInterface>\n) {\n  return (await db).put(\"posts\", data, key);\n}\n\nexport async function getPostCommentFromInDb(key: string) {\n  return (await db).get(\"posts\", key);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Jumbotron, Container, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\n\nimport { getPostComments } from \"src/services\";\nimport { PostCommentsInterface } from \"src/interfaces/PostListInterface\";\nimport { setPostCommentInDb, getPostCommentFromInDb } from \"src/indexDb\";\n\nfunction SinglePost(props: any) {\n  const params: any = useParams();\n  const [postComments, setPostComments] = useState<\n    Array<PostCommentsInterface>\n  >([]);\n\n  useEffect(() => {\n    if (params)\n      getPostComments(params.id)\n        .then(res => {\n          setPostComments(res);\n          setPostCommentInDb(\"comment\", res);\n        })\n        .catch(async () => {\n          const commentsFromIDB = await getPostCommentFromInDb(\"comment\");\n          setPostComments(commentsFromIDB);\n        });\n  }, []);\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-end p-3\">\n        <Button variant=\"secondary\" onClick={() => props.history.goBack()}>\n          Back\n        </Button>\n      </div>\n      <Jumbotron fluid>\n        <Container>\n          <h1 className=\"mb-3\">Post comments:{params.id}</h1>\n          {postComments.map((comment: PostCommentsInterface) => (\n            <div\n              className=\"mt-2 mb-2 text-left bg-white rounded p-3\"\n              key={comment.id}\n            >\n              <h3>{comment.name}</h3>\n              <h6>{comment.email}</h6>\n              <p>{comment.body}</p>\n            </div>\n          ))}\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default withRouter(SinglePost);\n","import {\n  PostListInterface,\n  CreateNewPostInterface,\n  PostCommentsInterface\n} from \"src/interfaces/PostListInterface\";\n\nexport function getPostsList(): Promise<Array<PostListInterface>> {\n  return fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(response => response.json())\n    .then(json => json);\n}\n\nexport function createPosts(\n  newPost: CreateNewPostInterface\n): Promise<PostListInterface> {\n  return fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n    method: \"POST\",\n    body: JSON.stringify(newPost)\n  })\n    .then(response => response.json())\n    .then(json => json);\n}\n\nexport function deletePost(postId: number) {\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`, {\n    method: \"DELETE\"\n  });\n}\n\nexport function getPostComments(\n  postId: number\n): Promise<Array<PostCommentsInterface>> {\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`)\n    .then(response => response.json())\n    .then(json => json);\n}\n","import React from \"react\";\nimport { Form, Button, Spinner } from \"react-bootstrap\";\n\nfunction AddPost(props: any) {\n  const {\n    onchangeHandler,\n    form,\n    addPostBtnHandler,\n    showLoader,\n    backToListBtnHandler\n  } = props;\n\n  return (\n    <div className=\"form-container\">\n      <Form className=\"w-100 d-flex flex-wrap\">\n        <Form.Group\n          controlId=\"formBasicTitle\"\n          className=\"w-100 justify-content-start\"\n        >\n          <Form.Label>Title</Form.Label>\n          <Form.Control\n            onChange={onchangeHandler}\n            type=\"email\"\n            value={form.title}\n            name=\"title\"\n            placeholder=\"Enter title\"\n          />\n        </Form.Group>\n\n        <Form.Group\n          controlId=\"formBasicBody\"\n          className=\"w-100 justify-content-start\"\n        >\n          <Form.Label>Body</Form.Label>\n          <Form.Control\n            onChange={onchangeHandler}\n            type=\"text\"\n            value={form.body}\n            name=\"body\"\n            placeholder=\"body\"\n          />\n        </Form.Group>\n        <Form.Group\n          controlId=\"formBasicUserId\"\n          className=\"w-100 justify-content-start\"\n        >\n          <Form.Label>User Id</Form.Label>\n          <Form.Control\n            onChange={onchangeHandler}\n            type=\"number\"\n            placeholder=\"User id\"\n            value={form.userId}\n            name=\"userId\"\n          />\n          <Form.Text className=\"text-muted\">\n            We'll never share your user id with anyone else.\n          </Form.Text>\n        </Form.Group>\n        <div className=\"d-flex justify-content-between align-item-end\">\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={addPostBtnHandler}\n            disabled={showLoader}\n          >\n            Post\n          </Button>\n          <Button\n            className=\"ml-2\"\n            variant=\"secondary\"\n            type=\"default\"\n            onClick={backToListBtnHandler}\n          >\n            Back\n          </Button>\n        </div>\n      </Form>\n\n      {showLoader && (\n        <>\n          <p>Posting post</p>\n          <Spinner animation=\"grow\" />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AddPost;\n","import React from \"react\";\nimport { ListGroup, Button } from \"react-bootstrap\";\nimport { withRouter } from \"react-router\";\n\nimport { PostListInterface } from \"src/interfaces/PostListInterface\";\n\nfunction List(props: any) {\n  const { postList, deleteBtnHandler, history } = props;\n  return (\n    <ListGroup className=\"w-75 d-inline-flex\">\n      <ListGroup.Item>\n        Your Posts&nbsp;<b>{postList.length}</b>\n      </ListGroup.Item>\n      {postList &&\n        postList.map((post: PostListInterface) => (\n          <React.Fragment key={post.id}>\n            <ListGroup.Item\n              variant=\"info\"\n              className=\"d-flex justify-content-center align-items-center flex-wrap\"\n            >\n              <p className=\"mr-2\">{post.id}</p>\n              {post.body}\n              <div>\n                <Button\n                  variant=\"outline-danger m-2 m-2\"\n                  onClick={() => deleteBtnHandler(post.id)}\n                >\n                  Delete\n                </Button>\n                <Button\n                  variant=\"outline-info m-2 m-2\"\n                  onClick={() => history.push(`post/${post.id}/comments`)}\n                >\n                  Comments\n                </Button>\n              </div>\n            </ListGroup.Item>\n          </React.Fragment>\n        ))}\n    </ListGroup>\n  );\n}\n\nexport default withRouter(List);\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Spinner,\n  Button,\n  Tabs,\n  Tab,\n  Alert,\n  Row,\n  Col,\n  Image,\n} from \"react-bootstrap\";\n\nimport {\n  setNewlyAddedPostInDb,\n  setDeletingPostIdInDb,\n  setPostListInDb,\n  getPostsFromInDb,\n} from \"src/indexDb\";\nimport AddPost from \"src/components/AddPost\";\nimport List from \"src/components/List\";\nimport { getPostsList, createPosts, deletePost } from \"src/services\";\nimport { PostListInterface } from \"src/interfaces/PostListInterface\";\n\nfunction Posts() {\n  const [postList, setPostList] = useState<Array<PostListInterface>>([]);\n  const [isAddPostBtnClicked, setAddPostButtonClicked] = useState<boolean>(\n    false\n  );\n  const [mode, setMode] = useState<boolean>(false);\n  const [postForm, setPostForm] = useState({\n    title: \"vivek\",\n    body: \"rajoriya\",\n    userId: 777,\n  });\n  const [showLoader, setShowLoader] = useState<boolean>(false);\n  const [key, setKey] = useState<string | null>(\"about\");\n\n  useEffect(() => {\n    if (key === \"list\") makeGetPostApiCall(); // to keep uptodate after deleting and addding opertation as well\n  }, [key]);\n\n  const makeGetPostApiCall = () => {\n    getPostsList()\n      .then((res) => {\n        setMode(false);\n        const AsPerRes = res.slice(0, 20);\n        setPostList(AsPerRes);\n        setPostListInDb(\"posts\", res);\n      })\n      .catch(async () => {\n        const postListFromStorage: Array<PostListInterface> = await getPostsFromInDb(\n          \"posts\"\n        );\n        setMode(true);\n        setPostList(postListFromStorage);\n      });\n  };\n\n  const onchangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { name, value },\n    } = e;\n    setPostForm((prev) => ({ ...prev, [name]: value } as any));\n  };\n\n  const addPostBtnHandler = () => {\n    setShowLoader(true);\n    if (navigator.onLine) {\n      createPosts(postForm).then((res) => {\n        const copyPostList = [...postList];\n        copyPostList.unshift(res);\n        setPostList(copyPostList);\n        setShowLoader(false);\n        setAddPostButtonClicked(false);\n      });\n    } else {\n      setNewlyAddedPostInDb(\"adding-postItem\", postForm);\n      navigator.serviceWorker.ready.then(function (swRegistration) {\n        swRegistration.sync.register(\"add-post\");\n      });\n      setShowLoader(false);\n      setAddPostButtonClicked(false);\n    }\n  };\n\n  const deleteBtnHandler = (postId: number) => {\n    setShowLoader(true);\n    if (navigator.onLine) {\n      deletePost(postId).then(() => {\n        const updatedPostList = postList.filter((item) => item.id !== postId);\n        setPostList(updatedPostList);\n        setShowLoader(false);\n      });\n    } else {\n      setDeletingPostIdInDb(\"postId\", postId);\n      navigator.serviceWorker.ready.then(function (swRegistration) {\n        swRegistration.sync.register(\"delete-post\");\n      });\n    }\n  };\n\n  const backToListBtnHandler = () => {\n    setShowLoader(false);\n    makeGetPostApiCall();\n    setAddPostButtonClicked(!isAddPostBtnClicked);\n  };\n\n  return (\n    <div>\n      {mode && (\n        <Alert key=\"warn-id\" variant=\"warning\">\n          Your are under offline mode!\n        </Alert>\n      )}\n      <div className=\"d-flex justify-content-center align-items-center p-3\">\n        {showLoader && !isAddPostBtnClicked ? (\n          <span>\n            <span className=\"pr-2\">Deleting post...</span>\n            <Spinner animation=\"grow\" />\n          </span>\n        ) : (\n          <div />\n        )}\n        <h1 className=\"mt-4 mb-4\">\n          React-Pwa-Poc\n          <div style={{ fontSize: 14 }}>Hope, You liked it</div>\n        </h1>\n      </div>\n      <Container fluid>\n        <Tabs\n          id=\"controlled-tab-example\"\n          activeKey={key}\n          onSelect={(k) => setKey(k)}\n        >\n          <Tab eventKey=\"about\" title=\"About\">\n            <p className=\"w-75 m-auto pt-3 pb-4 text-center\">\n              A progressive web application is a type of application software\n              delivered through the web, built using common web technologies\n              including HTML, CSS and JavaScript. It is intended to work on any\n              platform that uses a standards-compliant browser, including both\n              desktop and mobile devices\n            </p>\n            <Image\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Progressive_Web_Apps_Logo.svg/400px-Progressive_Web_Apps_Logo.svg.png\"\n              fluid\n            />\n          </Tab>\n          <Tab\n            eventKey=\"list\"\n            title=\"list\"\n            className=\"d-flex justify-content-around align-items-start mt-3 mb-2 flex-wrap\"\n          >\n            {isAddPostBtnClicked ? (\n              <AddPost\n                addPostBtnHandler={addPostBtnHandler}\n                onchangeHandler={onchangeHandler}\n                form={postForm}\n                showLoader={showLoader}\n                backToListBtnHandler={backToListBtnHandler}\n              />\n            ) : postList && postList.length !== 0 ? (\n              <>\n                <List postList={postList} deleteBtnHandler={deleteBtnHandler} />\n                <Button\n                  className=\"mt-3\"\n                  variant=\"success\"\n                  onClick={() => setAddPostButtonClicked(!isAddPostBtnClicked)}\n                >\n                  Add post\n                </Button>\n              </>\n            ) : (\n              <>\n                <p>Fetching posts...</p>\n                <Spinner animation=\"grow\" />\n              </>\n            )}\n          </Tab>\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n\nexport default Posts;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport SinglePost from \"src/screens/singlePost\";\nimport Posts from \"src/screens/Posts\";\n\nfunction Routing() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Posts />\n        </Route>\n        <Route path=\"/post/:id/comments\" exact strict>\n          <SinglePost />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routing;\n","import React, { useEffect } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Routing from \"src/Routes\";\nimport { initIndexDb } from \"src/indexDb\";\n\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    initIndexDb();\n  }, []);\n\n  return (\n    <HashRouter basename=\"/\">\n    <div className=\"App\">\n      <Routing />\n      <footer>\n        <u>\n          <b>Developed by Vivek Rajoriya, 2020</b>\n        </u>\n      </footer>\n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { swDev } from \"src/swDev.js\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nswDev();\n","export function swDev() {\n  if (\"serviceWorker\" in navigator) {\n    const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n    navigator.serviceWorker.register(swUrl).then(register => {\n      console.log(register, \"service worker is registered\");\n      // return register.pushManager.getSubscription().then(subcription => {\n      //   register.showNotification(\"hello world\");\n      // });\n    });\n  } else console.log(\"serviceWorked not supported\");\n}\n"],"sourceRoot":""}